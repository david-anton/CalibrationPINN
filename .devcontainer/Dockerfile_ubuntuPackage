# Base docker image
FROM --platform=linux/amd64 ubuntu:22.04

### Define (default) arguments
# Are overwritten by build arguments (if supplied while building the container)
ARG uid=1000
ARG gid=1000
ARG requirements=requirements.txt
ARG dev_requirements=dev-requirements.txt


### Change default shell
SHELL ["/bin/bash", "--login", "-c"]


### Create a non-root user
# For more information, see:
# - https://code.visualstudio.com/remote/advancedcontainers/add-nonroot-user
# - https://vsupalov.com/docker-shared-permissions/
ENV USER_NAME docker_user
ENV USER_UID $uid
ENV USER_GID $gid
ENV USER_HOME_DIR /home/$USER_NAME
RUN groupadd --gid $USER_GID $USER_NAME && \
    adduser \
    --disabled-password \
    --gecos "non-root user" \
    --uid $USER_UID \
    --gid $USER_GID \
    --home $USER_HOME_DIR \
    $USER_NAME


### Create directories
ENV DATA_DIR /data
RUN mkdir $DATA_DIR
# ENV APP_DIR $DATA_DIR/app
# RUN mkdir $APP_DIR
RUN mkdir -p /build/python


### Copy files
COPY $requirements /tmp/
COPY $dev_requirements /tmp/


### Install base utilities
RUN apt-get update && \
    apt-get install -y build-essential && \
    apt-get install -y wget && \
    apt-get install -y git && \
    apt-get install -y nano


### Install utilities
# Install Python
ENV PYTHON_RELEASE 3.11.3
ENV PYTHON_VERSION 3.11
RUN cd /build/python && \
    apt-get install -y zlib1g-dev libgdbm-dev libncurses5-dev libssl-dev libnss3-dev libffi-dev libreadline-dev libsqlite3-dev libbz2-dev && \
    wget https://www.python.org/ftp/python/${PYTHON_RELEASE}/Python-${PYTHON_RELEASE}.tgz && \
    tar -xf Python-${PYTHON_RELEASE}.tgz && \
    cd Python-${PYTHON_RELEASE} && \
    ./configure --enable-optimizations --with-ensurepip=install && \
    make -j $(nproc) && \
    make altinstall && \
    ln -sf /usr/local/bin/python${PYTHON_VERSION} /usr/bin/python3 && \
    ln -sf /usr/local/bin/pip${PYTHON_VERSION} /usr/bin/pip3

# Install Python requirements
RUN pip3 install --upgrade pip && \
    pip3 install -r /tmp/$requirements && \
    pip3 install -r /tmp/$dev_requirements && \
    pip3 install --pre torch --extra-index-url https://download.pytorch.org/whl/nightly/cpu

# Install fenicsx
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get install -y software-properties-common && \
    add-apt-repository ppa:fenics-packages/fenics && \
    apt-get update && \
    apt-get install -y fenicsx


### Clean up
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/*


### Change to non-root user 
USER $USER_NAME
# ### Set working directory
# WORKDIR $APP_DIR